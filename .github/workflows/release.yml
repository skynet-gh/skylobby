name: Build Release Artifacts

on:
  release:
    types: [created]

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: FranzDiebold/github-env-vars-action@v2.7.0
      - uses: actions/setup-java@v4.0.0
        with:
          java-version: '21'
          distribution: 'adopt'
      - uses: DeLaGuardo/setup-clojure@12.1
        with:
          cli: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/cache@v3.3.2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-node@v4.0.1
        with:
          node-version: '21'
          cache: 'npm'
      - run: npm install
      - run: clojure -M:cljs compile frontend
      - run: clojure -M:uberjar:headless
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ env.CI_REPOSITORY_NAME }}.jar
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}-linux.jar
          asset_content_type: application/java-archive
      # linux jar without version
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ env.CI_REPOSITORY_NAME }}.jar
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-linux.jar
          asset_content_type: application/java-archive
      - run: jpackage --app-version ${{ env.CI_REF_NAME }} @jpackage/lobby @jpackage/linux
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.CI_REPOSITORY_NAME }}_${{ env.CI_REF_NAME }}_amd64.deb
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}_linux-amd64.deb
          asset_content_type: application/vnd.debian.binary-package
      - uses: addnab/docker-run-action@v3
        with:
          image: fedora:35
          options: -v ${{ github.workspace }}:/workspace
          run: |
            yum install -y rpm-build wget
            wget https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.1%2B12/OpenJDK21U-jdk_x64_linux_hotspot_21.0.1_12.tar.gz
            tar xf OpenJDK21U-jdk_x64_linux_hotspot_21.0.1_12.tar.gz
            export JAVA_HOME="/jdk-21.0.1+12"
            export PATH="$JAVA_HOME/bin:$PATH"
            cd /workspace
            jpackage --app-version ${{ env.CI_REF_NAME }} @jpackage/lobby @jpackage/linux
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}-1.x86_64.rpm
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}_linux-amd64.rpm
          asset_content_type: application/x-binary
  build-mac:
    if: ${{ false }} # broken until 1.x ?
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: FranzDiebold/github-env-vars-action@v2.7.0
      - uses: actions/setup-java@v4.0.0
        with:
          java-version: '14'
          # ^ mac jpackage hates versions starting with 0 in later versions
          distribution: 'adopt'
      - uses: DeLaGuardo/setup-clojure@12.1
        with:
          cli: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/cache@v3.3.2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-node@v4.0.1
        with:
          node-version: '21'
          cache: 'npm'
      - run: npm install
      - run: clojure -M:cljs compile frontend
      - run: clojure -M:uberjar:headless
      # mac jar without version
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ env.CI_REPOSITORY_NAME }}.jar
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-mac.jar
          asset_content_type: application/java-archive
      - run: jpackage --app-version ${{ env.CI_REF_NAME }} @jpackage/lobby @jpackage/mac
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}.dmg
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}_mac.dmg
          asset_content_type: application/x-apple-diskimage
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: FranzDiebold/github-env-vars-action@v2.7.0
      - uses: actions/setup-java@v4.0.0
        with:
          java-version: '21'
          distribution: 'adopt'
      - uses: DeLaGuardo/setup-clojure@12.1
        with:
          cli: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/cache@v3.3.2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-node@v4.0.1
        with:
          node-version: '21'
          cache: 'npm'
      - run: npm install
      - run: clojure -M:cljs compile frontend
        shell: powershell
      - run: clojure -M:uberjar:headless
        shell: powershell
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ env.CI_REPOSITORY_NAME }}.jar
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}-windows.jar
          asset_content_type: application/java-archive
      - run: cp package/win/* target
      - run: jpackage --app-version ${{ env.CI_REF_NAME }} @jpackage/lobby @jpackage/windows
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}.msi
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}_windows.msi
          asset_content_type: application/x-msi
      # windows installer without version in filename
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.CI_REPOSITORY_NAME }}-${{ env.CI_REF_NAME }}.msi
          asset_name: ${{ env.CI_REPOSITORY_NAME }}-windows.msi
          asset_content_type: application/x-msi
  mark-latest-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: ncipollo/release-action@v1.13.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
      - uses: FranzDiebold/github-env-vars-action@v2.7.0
      - uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "https://github.com/skynet-gh/skylobby/releases/tag/${{ env.CI_REF_NAME }}"
